version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    environment:
      POSTGRES_DB: ${DB_NAME:-stock_control_prod}
      POSTGRES_USER: ${DB_USER:-stock_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stock_user} -d ${DB_NAME:-stock_control_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis para cache e mensagens do Celery
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend Django (com Gunicorn para produção)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    volumes:
      - ./backend/media:/app/media
      - static_volume_prod:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${DB_USER:-stock_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-stock_control_prod}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=*
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120 --max-requests 1000 --max-requests-jitter 100

  # Frontend Vue.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    volumes:
      - ./backend/media:/app/media
      - static_volume_prod:/app/staticfiles
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-stock_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-stock_control_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A config worker --loglevel=info --hostname=celery-worker --max-tasks-per-child=100

  # Celery Beat (scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    volumes:
      - ./backend/media:/app/media
      - static_volume_prod:/app/staticfiles
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-stock_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-stock_control_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

volumes:
  postgres_data_prod:
  redis_data_prod:
  static_volume_prod: